// Package app_openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package app_openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWXU/bShD9K6u59wF0fWNDfCXkN7htaVRUqiKeUB4WexIv2LvL7Jg2ivzfq13nwwlG",
	"CBX6RLye2Tlz5pwxS8hNbY1GzQ6yJbi8xFqGnxdK3/u/loxFYoXhNCeUjMUp+4eZoVoyZFBIxn9Z1QgR",
	"8MIiZOCYlJ5DG0GBFb4yBX9aRa9LKVXXwSZaaR4fbyOVZpwj+VCWNEe+pmonvqFq6F4296hfDmwjIHxo",
	"PGrIblZZ/VJRj7oV2unmFnN7hzn7ct/xoUHHV6WhNcLdAayomegPcvEODe/3sckcBuus0Q6fR+t6b15i",
	"eh070TPzaqCbQk9x+lC1urNAl5OyrIyGDK6pEgE7aiRfQnGF++fi9NsEInhEcl3W0SgZJR6wsailVZDB",
	"eJSMxhCBlVyGvuNAhXFBwJ4Q6UtOCsjg/yCDDWVdG+j4zBSL4DCjGXVIlNZWKg+p8Z0zeutQ/+tvwhlk",
	"8Fe8tXC88m+8L6N2ly+mBsNBN78A+ThJ3rD8njBC/V3yL794Do+Toz9atWO/8KXTruHd92eyECvyfMx/",
	"QzETzUhaVuIK6RFJfCQyFBTpmrqWtIBs7WMRdCkaqsRB2AmHYmZIdLYKxz8UlyKYOrQsvG3pUVbiQGlR",
	"yIU7FA6Z15qPl+Ga1qOa44C8PivuactKkjUykoPsZr+PUu3gIywUYc6CTR/gP0LpnLBGzcKvrUPwdoIs",
	"iB0i0LL2nllvvF2RRb3R7Rt4uifAcTJ+yvUVorjksttjaZI+jfhqWHwyjS5+c16Dzd8uRNdYn/t4vU0G",
	"B3COmwGETfbCELYDUF30u3D7luYO/xg8a+h3nNE59vUa6AowXEgZIvfC5LISjM77R3RxEIUPSgYls83i",
	"uPIxpXGcLa0hbmO/7CUpeVt13PnTDvBMNpX/IJ2kqd/2qJvaf3tWjydpmsK0bdtp+ysAAP//Vn7P81cJ",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
